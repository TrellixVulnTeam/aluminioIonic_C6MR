'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core = require('@angular/core');
var core$1 = require('@ionic-native/core');

var ɵngcc0 = require('@angular/core');
var FileTransfer = /** @class */ (function (_super) {
    tslib.__extends(FileTransfer, _super);
    function FileTransfer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Error code rejected from upload with FileTransferError
         * Defined in FileTransferError.
         *      FILE_NOT_FOUND_ERR: 1   Return when file was not found
         *      INVALID_URL_ERR: 2,     Return when url was invalid
         *      CONNECTION_ERR: 3,      Return on connection error
         *      ABORT_ERR: 4,           Return on aborting
         *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response
         * @enum {number}
         */
        _this.FileTransferErrorCode = {
            FILE_NOT_FOUND_ERR: 1,
            INVALID_URL_ERR: 2,
            CONNECTION_ERR: 3,
            ABORT_ERR: 4,
            NOT_MODIFIED_ERR: 5,
        };
        return _this;
    }
    /**
     * Creates a new FileTransfer object
     * @return {FileTransferObject}
     */
    FileTransfer.prototype.create = function () {
        return new FileTransferObject();
    };
    FileTransfer.pluginName = "FileTransfer";
    FileTransfer.plugin = "cordova-plugin-file-transfer";
    FileTransfer.pluginRef = "FileTransfer";
    FileTransfer.repo = "https://github.com/apache/cordova-plugin-file-transfer";
    FileTransfer.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Ubuntu", "Windows", "Windows Phone"];
FileTransfer.ɵfac = function FileTransfer_Factory(t) { return ɵFileTransfer_BaseFactory(t || FileTransfer); };
FileTransfer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FileTransfer, factory: function (t) { return FileTransfer.ɵfac(t); } });
var ɵFileTransfer_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(FileTransfer);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileTransfer, [{
        type: core.Injectable
    }], null, null); })();
    return FileTransfer;
}(core$1.IonicNativePlugin));
var FileTransferObject = /** @class */ (function () {
    function FileTransferObject() {
        if (core$1.checkAvailability(FileTransfer.getPluginRef(), null, FileTransfer.getPluginName()) === true) {
            this._objectInstance = new (FileTransfer.getPlugin())();
        }
    }
    FileTransferObject.prototype.upload = function (fileUrl, url, options, trustAllHosts) { return core$1.cordovaInstance(this, "upload", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FileTransferObject.prototype.download = function (source, target, trustAllHosts, options) { return core$1.cordovaInstance(this, "download", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    FileTransferObject.prototype.onProgress = function (listener) {
        var _this = this;
        return (function () {
            if (core$1.instanceAvailability(_this) === true) {
                _this._objectInstance.onprogress = listener;
            }
        })();
    };
    FileTransferObject.prototype.abort = function () { return core$1.cordovaInstance(this, "abort", { "sync": true }, arguments); };
    FileTransferObject.plugin = "cordova-plugin-file-transfer";
    FileTransferObject.pluginName = "FileTransfer";
    return FileTransferObject;
}());

exports.FileTransfer = FileTransfer;
exports.FileTransferObject = FileTransferObject;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7MEJBR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNvcmUgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgY29yZSQxID0gcmVxdWlyZSgnQGlvbmljLW5hdGl2ZS9jb3JlJyk7XG5cbnZhciBGaWxlVHJhbnNmZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEZpbGVUcmFuc2ZlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWxlVHJhbnNmZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogRXJyb3IgY29kZSByZWplY3RlZCBmcm9tIHVwbG9hZCB3aXRoIEZpbGVUcmFuc2ZlckVycm9yXG4gICAgICAgICAqIERlZmluZWQgaW4gRmlsZVRyYW5zZmVyRXJyb3IuXG4gICAgICAgICAqICAgICAgRklMRV9OT1RfRk9VTkRfRVJSOiAxICAgUmV0dXJuIHdoZW4gZmlsZSB3YXMgbm90IGZvdW5kXG4gICAgICAgICAqICAgICAgSU5WQUxJRF9VUkxfRVJSOiAyLCAgICAgUmV0dXJuIHdoZW4gdXJsIHdhcyBpbnZhbGlkXG4gICAgICAgICAqICAgICAgQ09OTkVDVElPTl9FUlI6IDMsICAgICAgUmV0dXJuIG9uIGNvbm5lY3Rpb24gZXJyb3JcbiAgICAgICAgICogICAgICBBQk9SVF9FUlI6IDQsICAgICAgICAgICBSZXR1cm4gb24gYWJvcnRpbmdcbiAgICAgICAgICogICAgICBOT1RfTU9ESUZJRURfRVJSOiA1ICAgICBSZXR1cm4gb24gJzMwNCBOb3QgTW9kaWZpZWQnIEhUVFAgcmVzcG9uc2VcbiAgICAgICAgICogQGVudW0ge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLkZpbGVUcmFuc2ZlckVycm9yQ29kZSA9IHtcbiAgICAgICAgICAgIEZJTEVfTk9UX0ZPVU5EX0VSUjogMSxcbiAgICAgICAgICAgIElOVkFMSURfVVJMX0VSUjogMixcbiAgICAgICAgICAgIENPTk5FQ1RJT05fRVJSOiAzLFxuICAgICAgICAgICAgQUJPUlRfRVJSOiA0LFxuICAgICAgICAgICAgTk9UX01PRElGSUVEX0VSUjogNSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZpbGVUcmFuc2ZlciBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtGaWxlVHJhbnNmZXJPYmplY3R9XG4gICAgICovXG4gICAgRmlsZVRyYW5zZmVyLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZVRyYW5zZmVyT2JqZWN0KCk7XG4gICAgfTtcbiAgICBGaWxlVHJhbnNmZXIucGx1Z2luTmFtZSA9IFwiRmlsZVRyYW5zZmVyXCI7XG4gICAgRmlsZVRyYW5zZmVyLnBsdWdpbiA9IFwiY29yZG92YS1wbHVnaW4tZmlsZS10cmFuc2ZlclwiO1xuICAgIEZpbGVUcmFuc2Zlci5wbHVnaW5SZWYgPSBcIkZpbGVUcmFuc2ZlclwiO1xuICAgIEZpbGVUcmFuc2Zlci5yZXBvID0gXCJodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWZpbGUtdHJhbnNmZXJcIjtcbiAgICBGaWxlVHJhbnNmZXIucGxhdGZvcm1zID0gW1wiQW1hem9uIEZpcmUgT1NcIiwgXCJBbmRyb2lkXCIsIFwiQnJvd3NlclwiLCBcImlPU1wiLCBcIlVidW50dVwiLCBcIldpbmRvd3NcIiwgXCJXaW5kb3dzIFBob25lXCJdO1xuICAgIEZpbGVUcmFuc2Zlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IGNvcmUuSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gRmlsZVRyYW5zZmVyO1xufShjb3JlJDEuSW9uaWNOYXRpdmVQbHVnaW4pKTtcbnZhciBGaWxlVHJhbnNmZXJPYmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsZVRyYW5zZmVyT2JqZWN0KCkge1xuICAgICAgICBpZiAoY29yZSQxLmNoZWNrQXZhaWxhYmlsaXR5KEZpbGVUcmFuc2Zlci5nZXRQbHVnaW5SZWYoKSwgbnVsbCwgRmlsZVRyYW5zZmVyLmdldFBsdWdpbk5hbWUoKSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuX29iamVjdEluc3RhbmNlID0gbmV3IChGaWxlVHJhbnNmZXIuZ2V0UGx1Z2luKCkpKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgRmlsZVRyYW5zZmVyT2JqZWN0LnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbiAoZmlsZVVybCwgdXJsLCBvcHRpb25zLCB0cnVzdEFsbEhvc3RzKSB7IHJldHVybiBjb3JlJDEuY29yZG92YUluc3RhbmNlKHRoaXMsIFwidXBsb2FkXCIsIHsgXCJzdWNjZXNzSW5kZXhcIjogMiwgXCJlcnJvckluZGV4XCI6IDMgfSwgYXJndW1lbnRzKTsgfTtcbiAgICBGaWxlVHJhbnNmZXJPYmplY3QucHJvdG90eXBlLmRvd25sb2FkID0gZnVuY3Rpb24gKHNvdXJjZSwgdGFyZ2V0LCB0cnVzdEFsbEhvc3RzLCBvcHRpb25zKSB7IHJldHVybiBjb3JlJDEuY29yZG92YUluc3RhbmNlKHRoaXMsIFwiZG93bmxvYWRcIiwgeyBcInN1Y2Nlc3NJbmRleFwiOiAyLCBcImVycm9ySW5kZXhcIjogMyB9LCBhcmd1bWVudHMpOyB9O1xuICAgIEZpbGVUcmFuc2Zlck9iamVjdC5wcm90b3R5cGUub25Qcm9ncmVzcyA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjb3JlJDEuaW5zdGFuY2VBdmFpbGFiaWxpdHkoX3RoaXMpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29iamVjdEluc3RhbmNlLm9ucHJvZ3Jlc3MgPSBsaXN0ZW5lcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICB9O1xuICAgIEZpbGVUcmFuc2Zlck9iamVjdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb3JlJDEuY29yZG92YUluc3RhbmNlKHRoaXMsIFwiYWJvcnRcIiwgeyBcInN5bmNcIjogdHJ1ZSB9LCBhcmd1bWVudHMpOyB9O1xuICAgIEZpbGVUcmFuc2Zlck9iamVjdC5wbHVnaW4gPSBcImNvcmRvdmEtcGx1Z2luLWZpbGUtdHJhbnNmZXJcIjtcbiAgICBGaWxlVHJhbnNmZXJPYmplY3QucGx1Z2luTmFtZSA9IFwiRmlsZVRyYW5zZmVyXCI7XG4gICAgcmV0dXJuIEZpbGVUcmFuc2Zlck9iamVjdDtcbn0oKSk7XG5cbmV4cG9ydHMuRmlsZVRyYW5zZmVyID0gRmlsZVRyYW5zZmVyO1xuZXhwb3J0cy5GaWxlVHJhbnNmZXJPYmplY3QgPSBGaWxlVHJhbnNmZXJPYmplY3Q7XG4iXX0=