{"version":3,"file":"ng-fallimg.umd.js","sources":["ng:/ng-fallimg/lib/ng-fallimg-sources.ts","ng:/ng-fallimg/lib/ng-fallimg.directive.ts","ng:/ng-fallimg/lib/ng-fallimg.module.ts"],"names":["Directive","ElementRef","Inject","Input","HostListener","NgModule"],"mappings":";;;;;;;;;;;;;;AAIA,QAAa,kBAAkB,GAAG,oBAAoB;AACtD;AACA;AACI;AAAsC;AAK/B;ACZX;AAAQ;AACF;AAMN;AAGe;AAAY;AAExB;AACkC;AAMpC;AAAY,QAWX,4BACU,EAAc,EACgB,cAA8B;AACrE,YAFS,OAAE,GAAF,EAAE,CAAY;AAAC,YACe,mBAAc,GAAd,cAAc,CAAgB;AACxE,SAAM;AACN;AAEK;AAGD;AAAY;AACb;AAGG;AAAoB;AAAuB;AAAY,QAHnD,4CAAe;AAAO;AAGG;AAAoB;AAE/C;AAAY,YANlB;AAAc;AACY;AAEJ,oBACd,MAAM,GAAG,IAAI,CAAC,cAAc,CAAE,IAAI,CAAC,OAAO,IAAI,SAAS,CAAE;AACnE;AAEW,gBAAP,IAAI,CAAC,MAAM,EAAE;AACjB,oBAAM,MAAM,IAAI,KAAK,CAAC,uBAAsB,IAAI,CAAC,OAAO,wDAAsD,CAAC,CAAC;AAChH,iBAAK;AACL;AAEW,gBAAP,IAAI,MAAM,KAAK,IAAI,CAAC,UAAU,EAAE;AACpC;AAEa,oBAAP,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;AAC/B,oBAAM,oBAAC,IAAI,CAAC,EAAE,CAAC,aAAa,IAAsB,GAAG,GAAG,MAAM,CAAC;AAC/D,iBACK;AACL,aAAG,CAhDU;AAAC;mCAHbA,cAAS,jDAMV;AANW,AAM+C;KALxD,QAAQ,EAAE,cAAc,7BAQnB,wBAhBaC,eAAU;QAS7B,RATiC,wDAgC7BC,WAAM,SAAE,kBAAkB;AAAQ;AAAe;AAAW;AAIzC,8BApBrBC,UAAK,SAAC,SAAS;AAAO,sCAuBtBC,iBAAY,SAAC,OAAO;AACnB;;;;;;;;;;;;;;;;;;;oBAAU;AAAC,QAmBf,yBAAC;AACA,KArDD;AAAK;AAAC;AACL;AAEQ;AAMR;AChBD;AAAuD,QAIvD;AACiB,SAoBhB;AACD;AAAY;AAAmD;AAAY;AAAY;AAAuD;AAAuB;AAAY,QAZxK,uBAAO;AAAO;AAEvB;AAAuB;AACrB,YAHA,UAAe,OAAuB;AAAI,gBACxC,OAAO;AACX,oBAAM,QAAQ,EAAE,eAAe;AAC/B,oBAAM,SAAS,EAAE;AACjB,wBAAQ;AACR,4BAAU,OAAO,EAAE,kBAAkB;AACrC,4BAAU,QAAQ,EAAE,OAAO;AAC3B,yBAAS;AACT,qBAAO;AACP,iBAAK,CAAC;AACN,aAAG;2DApBFC,aAAQ;MAAC,0BACR,YAAY,EAAE,CAAC,kBAAkB,CAAC,0BAClC,OAAO,EAAE,CAAC,kBAAkB,CAAC;IAC9B;;;;;;;gDACY;AAAC,QAiBd,sBAAC;AACA,KAtBD;AAAK;AAAC;AACJ;AACA;AAK6B;AAAQ;AAAC;AACrC;AAE6B;AAIzB;AACF;AAAC;AACQ;AAGT;AAGwB;AAAC;AAAmE;AAAC;;AFtBA,AAAA,AAAA,AAAA,AAAA,ACJA,AAOA,AAuBA,AACA,AAAA,AACA,AAAA,AADA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AACA,AAOA,AAAA,AADA,AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEA,AACA,AAnDAL,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AATAC,AAAA,AAgCAC,AAAA,AAAA,AAAA,AAhBAC,AAAA,AAAA,AAAA,AAuBAC,AAAA,AAAA,AAAA,AAoBA,AAAA,AApDA,ACPA,AAIA,AAqBA,AAXA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AACA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AACA,AACA,AAAA,AACA,AApBAC,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAkBA,AAAA,AArBA","sourcesContent":["/**\n * Injector token constant that contains all the fallback sources \n */\n\nexport const NG_FALLIMG_SOURCES = 'NG_FALLIMG_SOURCES';\n\n/**\n * Interface that define the object to pass to charged the fallback sources\n */\n\nexport interface IFallimgSource {\n    default: string;\n    [extraProps: string]: string\n}\n","import { Directive, ElementRef, Input, HostListener, Inject } from '@angular/core';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n/**\n * Directive for handling the default image when the main image doesn't works\n */\n\n@Directive({\n  selector: 'img[fallimg]'\n})\nexport class NgFallimgDirective {\n\n  /**\n   * Input that receive an optional key for returning the source\n   */\n\n  @Input('fallimg') public fallimg: string;\n\n  /**\n   * It contains the last source setted when the main source fails\n   */\n\n  private lastSource: string;\n\n  /**\n   * \n   * @param el ElementRef service\n   * @param fallimgSources Injector token that contains all the fallback sources\n   */\n\n  constructor(\n    private el: ElementRef,\n    @Inject( NG_FALLIMG_SOURCES ) private fallimgSources: IFallimgSource\n  ) {}\n\n  /**\n   * It handles the error when the main image doesn't load\n   */\n\n  @HostListener('error')\n  private errorImgHandler(): void {\n\n    // The chosen source\n    const source = this.fallimgSources[ this.fallimg || 'default' ];\n\n    // Verify if the key exists in all fallback sources\n    if (!source) {\n      throw new Error(`ng-fallimg error: ${ this.fallimg } doesn't exist as a source or it is an empty source`);\n    }\n\n    // it checks if the charged source is different to the actual source, this avoid the infinite bucle creation\n    if (source !== this.lastSource) {\n\n      // It saves the last source for matching when the fallback source fails and retried, that avoid an infinite bucle\n      this.lastSource = source;\n      (this.el.nativeElement as HTMLImageElement).src = source;\n      \n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgFallimgDirective } from './ng-fallimg.directive';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n@NgModule({\n  declarations: [NgFallimgDirective],\n  exports: [NgFallimgDirective]\n})\nexport class NgFallimgModule { \n  \n  /**\n   * @param sources All the fallback sources\n   */\n  \n  static forRoot(sources: IFallimgSource): ModuleWithProviders {\n    return {\n      ngModule: NgFallimgModule,\n      providers: [\n        {\n          provide: NG_FALLIMG_SOURCES,\n          useValue: sources\n        }\n      ]\n    };\n  }\n}\n"]}