/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgFallimgDirective } from './ng-fallimg.directive';
import { NG_FALLIMG_SOURCES } from './ng-fallimg-sources';
import * as ɵngcc0 from '@angular/core';
var NgFallimgModule = /** @class */ (function () {
    function NgFallimgModule() {
    }
    /**
     * @param sources All the fallback sources
     */
    /**
     * @param {?} sources All the fallback sources
     * @return {?}
     */
    NgFallimgModule.forRoot = /**
     * @param {?} sources All the fallback sources
     * @return {?}
     */
    function (sources) {
        return {
            ngModule: NgFallimgModule,
            providers: [
                {
                    provide: NG_FALLIMG_SOURCES,
                    useValue: sources
                }
            ]
        };
    };
NgFallimgModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgFallimgModule });
NgFallimgModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgFallimgModule_Factory(t) { return new (t || NgFallimgModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgFallimgModule, { declarations: function () { return [NgFallimgDirective]; }, exports: function () { return [NgFallimgDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgFallimgModule, [{
        type: NgModule,
        args: [{
                declarations: [NgFallimgDirective],
                exports: [NgFallimgDirective]
            }]
    }], function () { return []; }, null); })();
    return NgFallimgModule;
}());
export { NgFallimgModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZmFsbGltZy5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1mYWxsaW1nL2xpYi9uZy1mYWxsaW1nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFrQixNQUFNLHNCQUFzQixDQUFDOztBQUUxRTtBQUVDLElBRkQ7QUFDaUIsSUFvQmpCLENBQUM7QUFDRCxJQWhCRTtBQUNGO0FBQ0UsT0FBRztBQUNMO0FBQ0s7QUFBbUQ7QUFDOUM7QUFDTCxJQUZJLHVCQUFPO0FBQU87QUFDZDtBQUNNO0FBQVEsSUFGckIsVUFBZSxPQUF1QjtBQUFJLFFBQ3hDLE9BQU87QUFDWCxZQUFNLFFBQVEsRUFBRSxlQUFlO0FBQy9CLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLGdCQUFRO0FBQ1Isb0JBQVUsT0FBTyxFQUFFLGtCQUFrQjtBQUNyQyxvQkFBVSxRQUFRLEVBQUUsT0FBTztBQUMzQixpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLLENBQUM7QUFDTixJQUFFLENBQUM7bURBcEJGLFFBQVEsU0FBQztlQUNSLFlBQVksRUFBRSxDQUFDLGtCQUFrQixDQUFDLHNCQUNsQyxPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFDOUI7Ozs7Ozs7O2dEQUNRO0FBQUMsSUFpQlYsc0JBQUM7QUFDQSxDQURBLEFBckJELElBcUJDO0FBQ0QsU0FsQmEsZUFBZTtBQUM1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0ZhbGxpbWdEaXJlY3RpdmUgfSBmcm9tICcuL25nLWZhbGxpbWcuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5HX0ZBTExJTUdfU09VUkNFUywgSUZhbGxpbWdTb3VyY2UgfSBmcm9tICcuL25nLWZhbGxpbWctc291cmNlcyc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW05nRmFsbGltZ0RpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtOZ0ZhbGxpbWdEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIE5nRmFsbGltZ01vZHVsZSB7IFxuICBcbiAgLyoqXG4gICAqIEBwYXJhbSBzb3VyY2VzIEFsbCB0aGUgZmFsbGJhY2sgc291cmNlc1xuICAgKi9cbiAgXG4gIHN0YXRpYyBmb3JSb290KHNvdXJjZXM6IElGYWxsaW1nU291cmNlKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ0ZhbGxpbWdNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HX0ZBTExJTUdfU09VUkNFUyxcbiAgICAgICAgICB1c2VWYWx1ZTogc291cmNlc1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfVxufVxuIl19