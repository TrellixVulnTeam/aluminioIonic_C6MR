/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-restangular-http.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpBackend, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { throwError } from 'rxjs';
import { RestangularHelper } from './ngx-restangular-helper';
import { catchError, filter, map } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
export class RestangularHttp {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    createRequest(options) {
        /** @type {?} */
        const request = RestangularHelper.createRequest(options);
        return this.request(request);
    }
    /**
     * @param {?} request
     * @return {?}
     */
    request(request) {
        return this.http.handle(request)
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof HttpResponse)), map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (!response.ok) {
                return throwError(new HttpErrorResponse(response));
            }
            return response;
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            response.config = { params: request };
            return response;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            err.request = request;
            err.data = err.error;
            err.repeatRequest = (/**
             * @param {?=} newRequest
             * @return {?}
             */
            (newRequest) => {
                return this.request(newRequest || request);
            });
            return throwError(err);
        })));
    }
}
RestangularHttp.ɵfac = function RestangularHttp_Factory(t) { return new (t || RestangularHttp)(ɵngcc0.ɵɵinject(ɵngcc1.HttpBackend)); };
RestangularHttp.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RestangularHttp, factory: RestangularHttp.ɵfac });
/** @nocollapse */
RestangularHttp.ctorParameters = () => [
    { type: HttpBackend }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RestangularHttp, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.HttpBackend }]; }, null); })();
if (false) {
    /** @type {?} */
    RestangularHttp.prototype.http;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc3Rhbmd1bGFyLWh0dHAuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1yZXN0YW5ndWxhci9zcmMvbGliL25neC1yZXN0YW5ndWxhci1odHRwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUEwQixZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RyxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFHekQsTUFBTSxPQUFPLGVBQWU7QUFDNUI7QUFDTztBQUF1QjtBQUFRLElBQXBDLFlBQW1CLElBQWlCO0FBQ3RDLFFBRHFCLFNBQUksR0FBSixJQUFJLENBQWE7QUFBQyxJQUNyQyxDQUFDO0FBQ0g7QUFDTztBQUEwQjtBQUFtQjtBQUMvQyxJQURILGFBQWEsQ0FBQyxPQUFPO0FBQUk7QUFBeUIsY0FDMUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7QUFDNUQsUUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUEwQjtBQUFtQjtBQUFRLElBQTFELE9BQU8sQ0FBQyxPQUF5QjtBQUFJLFFBQ25DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ3BDLGFBQUssSUFBSSxDQUNILE1BQU07QUFBTTtBQUE0QjtBQUMvQjtBQUFZLFFBRGQsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLFlBQVksWUFBWSxFQUFDLEVBQzlDLEdBQUc7QUFBTTtBQUNBO0FBQ0w7QUFBWSxRQUZaLENBQUMsUUFBYSxFQUFFLEVBQUU7QUFDNUIsWUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtBQUMxQixnQkFBVSxPQUFPLFVBQVUsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDN0QsYUFBUztBQUNULFlBQVEsT0FBTyxRQUFRLENBQUM7QUFDeEIsUUFBTSxDQUFDLEVBQUMsRUFDRixHQUFHO0FBQU07QUFDTztBQUN0QjtBQUFZLFFBRkYsUUFBUSxDQUFDLEVBQUU7QUFDckIsWUFBUSxRQUFRLENBQUMsTUFBTSxHQUFHLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBQyxDQUFDO0FBQzVDLFlBQVEsT0FBTyxRQUFRLENBQUM7QUFDeEIsUUFBTSxDQUFDLEVBQUMsRUFDRixVQUFVO0FBQU07QUFDQTtBQUNSO0FBQVksUUFGVCxHQUFHLENBQUMsRUFBRTtBQUN2QixZQUFRLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzlCLFlBQVEsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQzdCLFlBQVEsR0FBRyxDQUFDLGFBQWE7QUFBUTtBQUNUO0FBQTJCO0FBR2xELFlBSjJCLENBQUMsVUFBVyxFQUFFLEVBQUU7QUFDNUMsZ0JBQVUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQztBQUNyRCxZQUFRLENBQUMsQ0FBQSxDQUFDO0FBQ1YsWUFDUSxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixRQUFNLENBQUMsRUFBQyxDQUNILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDsyQ0FyQ0MsVUFBVTs2R0FDVDtBQUFDO0FBQW1CO0FBRVMsWUFWdEIsV0FBVztBQUFHOzs7NEVBQUU7QUFBQztBQUFhO0FBQXFCLElBVTlDLCtCQUF3QjtBQUFDO0FBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQmFja2VuZCwgSHR0cEVycm9yUmVzcG9uc2UsIEh0dHBFdmVudCwgSHR0cFJlcXVlc3QsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgdGhyb3dFcnJvciwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBSZXN0YW5ndWxhckhlbHBlciB9IGZyb20gJy4vbmd4LXJlc3Rhbmd1bGFyLWhlbHBlcic7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlc3Rhbmd1bGFySHR0cCB7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGh0dHA6IEh0dHBCYWNrZW5kKSB7XG4gIH1cblxuICBjcmVhdGVSZXF1ZXN0KG9wdGlvbnMpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IFJlc3Rhbmd1bGFySGVscGVyLmNyZWF0ZVJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHJlcXVlc3QpO1xuICB9XG5cbiAgcmVxdWVzdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+KTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuaGFuZGxlKHJlcXVlc3QpXG4gICAgLnBpcGUoXG4gICAgICBmaWx0ZXIoZXZlbnQgPT4gZXZlbnQgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2UpLFxuICAgICAgbWFwKChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgSHR0cEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9KSxcbiAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgIHJlc3BvbnNlLmNvbmZpZyA9IHtwYXJhbXM6IHJlcXVlc3R9O1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9KSxcbiAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgZXJyLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICBlcnIuZGF0YSA9IGVyci5lcnJvcjtcbiAgICAgICAgZXJyLnJlcGVhdFJlcXVlc3QgPSAobmV3UmVxdWVzdD8pID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG5ld1JlcXVlc3QgfHwgcmVxdWVzdCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19